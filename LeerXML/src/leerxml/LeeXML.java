package leerxml;

import java.awt.print.PrinterException;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;

public class LeeXML extends javax.swing.JFrame {

    public LeeXML(){
        initComponents();

        leeXMLInternet();
        JTable infoTabla = new JTable(4, 4);
        
        infoTabla.setVisible(true);
    }

    private void leeXMLInternet() {

        try {

            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            // File archivo = new File("C:\\PVeI 2018\\AlumnosPequeno.xml");
            File archivo = new File("prueba.xml");
            Document doc = dBuilder.parse(archivo);

            //optional, but recommended
            //read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
            doc.getDocumentElement().normalize();

            System.out.println("Elemento raíz o principal: "
                    + doc.getDocumentElement().getNodeName());

            // NodeList listadoNodos = doc.getElementsByTagName("hijo");
            NodeList listadoNodos = doc.getDocumentElement().getChildNodes();
            System.out.println("----------------------------");

            System.out.println("Elementos listadoNodos: "
                    + listadoNodos.getLength());

            for (int i = 0; i < listadoNodos.getLength(); i++) {
                if (i % 2 == 1) {
                    Node nodoHijo = listadoNodos.item(i);

                    System.out.println("\nCurrent Element :" + nodoHijo.getNodeName());
                    if (nodoHijo.getNodeType() == Node.ELEMENT_NODE) {
                        NodeList otroListado = nodoHijo.getChildNodes();
                        for (int j = 0; j < otroListado.getLength(); j++) {
                            if (j % 2 == 1) {
                                String nombreNodo = otroListado.item(j).getNodeName();

                                nombreColumnas.add(nombreNodo);

                                String textoNodo = otroListado.item(j).getTextContent();

                                infoColumna.add(textoNodo);
                                System.out.println(nombreNodo + ": " + textoNodo);
                            }
                        }
                        System.out.println("\n");

                        System.out.println(nombreColumnas.size());
                        System.out.println(infoColumna.size());
                        for (int j = 0; j < nombreColumnas.size(); j++) {
                            System.out.println(nombreColumnas.get(j));
                        }
                        for (int j = 0; j < infoColumna.size(); j++) {
                            System.out.println(infoColumna.get(j));
                        }
                        
                      //  infoRenglon = infoColumna.toArray();

                        // Element eElement = (Element) nodoHijo;
                        // System.out.println("Nombres : " + eElement.getAttribute("id"));
//                            System.out.println("Nombres : " + eElement.getElementsByTagName("nombres").item(0).getTextContent());
//                            System.out.println("Apellidos : " + eElement.getElementsByTagName("apellidos").item(0).getTextContent());
//                            System.out.println("Sexo : " + eElement.getElementsByTagName("sexo").item(0).getTextContent());
//                            System.out.println("FechaNacimiento : " + eElement.getElementsByTagName("fechaNacimiento").item(0).getTextContent());
//                            System.out.println("Materias : " + eElement.getElementsByTagName("materias").item(0).getTextContent());
                    }
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Excepción: " + ex.toString());
        }
    }

    ArrayList<String> nombreColumnas = new ArrayList<String>();
    ArrayList<String> infoColumna = new ArrayList<String>();
    String[] infoRenglon;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LeeXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LeeXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LeeXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LeeXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LeeXML().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
