/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bloc;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.text.Caret;

/**
 *
 * @author dii
 */
public class NotePad extends javax.swing.JFrame {

    /**
     * Creates new form NotePad
     */
    public NotePad() {
        initComponents();
         System.out.println(JFrame.EXIT_ON_CLOSE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        jMenuBar2 = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        miNuevo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miAbrir = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        miGuardar = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        miSalir = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        menuEdicion = new javax.swing.JMenu();
        menuDeshacer = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        menuCortar = new javax.swing.JMenuItem();
        menuCopiar = new javax.swing.JMenuItem();
        menuPegar = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        miAjusteLinea = new javax.swing.JCheckBoxMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        miFuente = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        menuColor = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenuItem1.setText("jMenuItem1");

        jMenu5.setText("File");
        jMenuBar3.add(jMenu5);

        jMenu6.setText("Edit");
        jMenuBar3.add(jMenu6);

        jMenu7.setText("jMenu7");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sin título: Bloc de notas");

        txtArea.setColumns(20);
        txtArea.setLineWrap(true);
        txtArea.setRows(5);
        txtArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtAreaCaretUpdate(evt);
            }
        });
        txtArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtAreaMouseClicked(evt);
            }
        });
        txtArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAreaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtArea);

        menuArchivo.setText("Archivo");

        miNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        miNuevo.setMnemonic('n');
        miNuevo.setText("Nuevo");
        miNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(miNuevo);
        menuArchivo.add(jSeparator1);

        miAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        miAbrir.setText("Abrir");
        miAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(miAbrir);
        menuArchivo.add(jSeparator2);

        miGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        miGuardar.setText("Guardar");
        miGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(miGuardar);
        menuArchivo.add(jSeparator3);

        miSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        miSalir.setText("Salir");
        miSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSalirActionPerformed(evt);
            }
        });
        menuArchivo.add(miSalir);
        menuArchivo.add(jSeparator4);

        jMenuBar2.add(menuArchivo);

        menuEdicion.setText("Edición");

        menuDeshacer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        menuDeshacer.setText("Deshacer");
        menuDeshacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDeshacerActionPerformed(evt);
            }
        });
        menuEdicion.add(menuDeshacer);
        menuEdicion.add(jSeparator5);

        menuCortar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        menuCortar.setText("Cortar");
        menuCortar.setToolTipText("");
        menuCortar.setEnabled(false);
        menuCortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCortarActionPerformed(evt);
            }
        });
        menuEdicion.add(menuCortar);

        menuCopiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        menuCopiar.setText("Copiar");
        menuCopiar.setEnabled(false);
        menuCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCopiarActionPerformed(evt);
            }
        });
        menuEdicion.add(menuCopiar);

        menuPegar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        menuPegar.setText("Pegar");
        menuPegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPegarActionPerformed(evt);
            }
        });
        menuEdicion.add(menuPegar);

        jMenuBar2.add(menuEdicion);

        jMenu3.setText("Formato");

        miAjusteLinea.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        miAjusteLinea.setSelected(true);
        miAjusteLinea.setText("Ajuste de línea");
        miAjusteLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAjusteLineaActionPerformed(evt);
            }
        });
        jMenu3.add(miAjusteLinea);
        jMenu3.add(jSeparator6);

        miFuente.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        miFuente.setText("Fuente");
        miFuente.setEnabled(false);
        miFuente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miFuenteActionPerformed(evt);
            }
        });
        jMenu3.add(miFuente);
        jMenu3.add(jSeparator7);

        menuColor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        menuColor.setText("Cambiar color Fondo");
        menuColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuColorActionPerformed(evt);
            }
        });
        jMenu3.add(menuColor);
        jMenu3.add(jSeparator8);

        jMenuBar2.add(jMenu3);

        jMenu8.setText("Ayuda");

        jMenuItem2.setText("Acerca del bloc de notas");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem2);

        jMenuBar2.add(jMenu8);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSalirActionPerformed
        // TODO add your handling code here:
        System.out.println(guardado);
        System.out.println(ruta);
       
        if (guardado == false) {

            if (abierto == true && !txtArea.getText().equals(contenedor) || activado == true) {
                int opcion = JOptionPane.showConfirmDialog(null, "¿Desea guardar los cambios?", "Guardar", JOptionPane.YES_NO_CANCEL_OPTION);
                if (opcion == 2) { //cancel
                    return;
                } else if (opcion == 1) { //no
                    System.exit(0);
                } else if (opcion == 0) { //si
                    guardarNormal();
                    System.exit(0);
                }
            } else if (ruta == null) {
                System.out.println("entra");
                if (!txtArea.getText().equals("")) {
                    //escribir joption
                    int opcion = JOptionPane.showConfirmDialog(null, "¿Desea guardar los cambios?", "Guardar", JOptionPane.YES_NO_CANCEL_OPTION);
                    if (opcion == 2) { //cancel
                        return;
                    } else if (opcion == 1) { //no
                        System.exit(0);
                    } else if (opcion == 0) { //si
                        archivoNuevo();
                        System.exit(0);
                    }

                } else {
                    System.exit(0);
                }
            }
        } else {
            System.exit(0);
        }

    }//GEN-LAST:event_miSalirActionPerformed

    private void miFuenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miFuenteActionPerformed
        // TODO add your handling code here:
        For formatito = new For();
        Formato x = new Formato(this, true, formatito);

        x.setVisible(true);
        txtArea.setFont(formatito.formato);
        guardado = formatito.guardado;
        activado = formatito.activado;
        System.out.println("aqui esta en formato: " + guardado);
    }//GEN-LAST:event_miFuenteActionPerformed

    private void miAjusteLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAjusteLineaActionPerformed
        // TODO add your handling code here:
        int aux = 0;

        if (aux == 0) {
            txtArea.setLineWrap(!txtArea.getLineWrap());
            guardado = false;
            aux = 1;
        } else {
            guardado = true;
        }

    }//GEN-LAST:event_miAjusteLineaActionPerformed

    private void miNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNuevoActionPerformed
        // TODO add your handling code here:

        if (guardado == false) {

            if (!txtArea.getText().equals(contenedor) || activado == true) {

                int opcion = JOptionPane.showConfirmDialog(null, "¿Desea guardar los cambios?", "Guardar", JOptionPane.YES_NO_CANCEL_OPTION);
                if (opcion == 2) { //cancel
                    return;
                } else if (opcion == 1) { //no
                    txtArea.setText("");
                    ruta = null;
                    setTitle("Sin título: Bloc de notas");
                    contenedor = "";
                } else if (opcion == 0) { //si
                    guardarNormal();
                    setTitle("Sin título: Bloc de notas");
                    txtArea.setText("");
                    ruta = null;
                    contenedor = "";
                }
                activado = false;
            } else if (txtArea.getText().equals(contenedor)) {

                setTitle("Sin título: Bloc de notas");
                txtArea.setText("");
                ruta = null;
                contenedor = "";
            } else if (!txtArea.getText().equals("")) {
                setTitle("Sin título: Bloc de notas");
                int opcion = JOptionPane.showConfirmDialog(null, "¿Desea guardar los cambios?", "Guardar", JOptionPane.YES_NO_CANCEL_OPTION);
                if (opcion == 2) { //cancel
                    return;
                } else if (opcion == 1) { //no
                    txtArea.setText("");
                    ruta = null;
                    setTitle("Sin título: Bloc de notas");
                } else if (opcion == 0) { //si
                    archivoNuevo();
                }
            }
        } else {
            guardado = true;
            abierto = false;

            txtArea.setText("");
            ruta = null;
            setTitle("Sin título: Bloc de notas");
        }
        miFuente.setEnabled(false);
        txtArea.setBackground(Color.WHITE);

    }//GEN-LAST:event_miNuevoActionPerformed

    private void miAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAbrirActionPerformed
        // TODO add your handling code here:
        System.out.println("este" + abierto);

        if (guardado == true) {
            txtArea.setText("");
            abrirArchivo();
            setTitle(ruta);
        } else {
            if (!txtArea.getText().equals(contenedor) || activado == true) {

                int opcion = JOptionPane.showConfirmDialog(null, "¿Desea guardar los cambios?", "Guardar", JOptionPane.YES_NO_CANCEL_OPTION);
                if (opcion == 2) { //cancel
                    return;
                } else if (opcion == 1) { //no
                    txtArea.setBackground(Color.WHITE);
                    abrirArchivo();
                    setTitle(ruta);
                    
                    //contenedor = "";
                } else if (opcion == 0) { //si
                    guardarNormal();
                    txtArea.setText("");
                    abrirArchivo();
                    setTitle(ruta);

                    //  ruta = null;
                    //  contenedor = "";
                }

            } else if (txtArea.getText().equals(contenedor)) {
                txtArea.setText("");
                setTitle("Sin título: Bloc de notas");
                abrirArchivo();
                setTitle(ruta);

                //ruta = null;
                //contenedor = "";
            }
        }
        txtArea.setBackground(Color.WHITE);
    }//GEN-LAST:event_miAbrirActionPerformed

    private void miGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miGuardarActionPerformed
        // TODO add your handling code here:
        guardarNormal();
        guardado = true;
        System.out.println(guardado);
    }//GEN-LAST:event_miGuardarActionPerformed

    private void menuDeshacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDeshacerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuDeshacerActionPerformed

    private void menuCortarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCortarActionPerformed
        // TODO add your handling code here:

        txtArea.cut();
        guardado = false;
    }//GEN-LAST:event_menuCortarActionPerformed

    private void menuCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCopiarActionPerformed
        // TODO add your handling code here:
        txtArea.copy();
        // guardado = false;
    }//GEN-LAST:event_menuCopiarActionPerformed

    private void menuPegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPegarActionPerformed
        // TODO add your handling code here:
        txtArea.paste();
        guardado = false;
    }//GEN-LAST:event_menuPegarActionPerformed

    private void txtAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaKeyPressed
        // TODO add your handling code here:
        guardado = false;
        miFuente.setEnabled(true);
    }//GEN-LAST:event_txtAreaKeyPressed

    private void txtAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtAreaMouseClicked
        // TODO add your handling code here:


    }//GEN-LAST:event_txtAreaMouseClicked

    private void txtAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtAreaCaretUpdate
        // TODO add your handling code here:
        //
        //guardado = false;
        String var = txtArea.getSelectedText();

        if (var != null) {
            menuCortar.setEnabled(true);
            menuCopiar.setEnabled(true);

        } else {
            menuCortar.setEnabled(false);
            menuCopiar.setEnabled(false);
        }
    }//GEN-LAST:event_txtAreaCaretUpdate

    private void menuColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuColorActionPerformed
        // TODO add your handling code here:
        For unColor = new For();
        AreaColor ac = new AreaColor(this, true, unColor);
        ac.setVisible(true);

        txtArea.setBackground(unColor.color);
        guardado = unColor.guardado;
        activado = unColor.activado;
    }//GEN-LAST:event_menuColorActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        ayuda a = new ayuda(this, true);
        a.setVisible(true);
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    public void archivoNuevo() {
        //poner try catch a los open dialog
        JFileChooser guardarNuevo = new JFileChooser();
        guardarNuevo.showSaveDialog(null);
        File fNuevo = new File(guardarNuevo.getSelectedFile() + ".txt");
        try {
            // TODO add your handling code here:
            FileWriter fw = new FileWriter(fNuevo);
            String texto = txtArea.getText().replace("\n", "\r\n");
            PrintWriter pw = new PrintWriter(fw);
            pw.print(texto);
            fw.close();
        } catch (IOException ex) {
            Logger.getLogger(Bloc.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void abrirArchivo() {
        // guardado = true;
        txtArea.setText("");
        try {
            JFileChooser seleccionado = new JFileChooser();
            int regreso = seleccionado.showOpenDialog(seleccionado);
            if (regreso == JFileChooser.CANCEL_OPTION) {
                return;
            } else if (regreso == JFileChooser.APPROVE_OPTION) {
                ruta = seleccionado.getSelectedFile().getAbsolutePath();
                setTitle(seleccionado.getSelectedFile().getPath());
                System.out.println(seleccionado.getSelectedFile().getPath());
                leerArchivo(ruta);
            }
            abierto = true;
            miFuente.setEnabled(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }

    public void leerArchivo(String ruta) {
        contenedor = "";
        try {
            FileReader fr = new FileReader(ruta);
            BufferedReader bf = new BufferedReader(fr);

            while ((sCadena = bf.readLine()) != null) {
                txtArea.append(sCadena + "\n");
                contenedor += sCadena + "\n";
            }

        } catch (Exception e) {

        }
    }

    public void guardarNormal() {
        if (ruta == null) {
            archivoNuevo();
        } else {

            try {
                //calar flush()
                // TODO add your handling code here:
                FileWriter fw = new FileWriter(ruta);
                String texto = txtArea.getText().replace("\n", "\r\n");
                PrintWriter pw = new PrintWriter(fw);
                pw.print(texto);
                fw.close();
                System.out.println("entra");
            } catch (IOException ex) {
                Logger.getLogger(Bloc.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    String ruta, sCadena;
    FileWriter fw;
    String contenedor = "";
    boolean abierto = false;
    boolean guardado = true;
    boolean activado = false;
    Color c;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NotePad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NotePad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NotePad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NotePad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NotePad().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuItem menuColor;
    private javax.swing.JMenuItem menuCopiar;
    private javax.swing.JMenuItem menuCortar;
    private javax.swing.JMenuItem menuDeshacer;
    private javax.swing.JMenu menuEdicion;
    private javax.swing.JMenuItem menuPegar;
    private javax.swing.JMenuItem miAbrir;
    private javax.swing.JCheckBoxMenuItem miAjusteLinea;
    private javax.swing.JMenuItem miFuente;
    private javax.swing.JMenuItem miGuardar;
    private javax.swing.JMenuItem miNuevo;
    private javax.swing.JMenuItem miSalir;
    private javax.swing.JTextArea txtArea;
    // End of variables declaration//GEN-END:variables
}
